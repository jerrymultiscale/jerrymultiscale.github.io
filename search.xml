<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[诗词歌赋]]></title>
    <url>%2F2017-07-day%2FShiCiGeFu%2F</url>
    <content type="text"><![CDATA[落霞与孤鹜齐飞，秋水共长天一色 1. 《滕王阁序》&emsp;&emsp;南昌（豫章）故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰，台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。 时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层台耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，列冈峦之体势。披绣闼，俯雕甍，山原旷其盈视，川泽盱其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之轴。虹销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨；雁阵惊寒，声断衡阳之浦。 遥襟俯畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。 天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，指吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？ 嗟乎！时运不济，命运多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时。所赖君子安贫，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空怀报国之心；阮藉猖狂，岂效穷途之哭！ 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗懿之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今晨捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ 鸣呼！胜地不常，盛筵难再。兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙诚，恭疏短引。一言均赋，四韵俱成。请洒潘江，各倾陆海云尔！ 滕王高阁临江渚， 佩玉鸣鸾罢歌舞。 画栋朝飞南浦云， 珠帘暮卷西山雨。 闲云潭影日悠悠， 物换星移几度秋。 阁中帝子今何在？ 槛外长江空自流。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Learn Numpy The Hard Way]]></title>
    <url>%2F2017-07-day%2FNumPy%20Learn%2F</url>
    <content type="text"><![CDATA[NumPy, which stands for Numerical Python, is a library consisting of multidimensional array objects and a collection of routines for processing those arrays. Using NumPy, mathematical and logical operations on arrays can be performed一些参考资料：Basics of numpySome numpy exercisesAdvanced numpyNumpy reference 1. Numpy的前世今生Numeric, the ancestor of NumPy, was developed by Jim Hugunin. Another package Numarray was also developed, having some additional functionalities. In 2005, Travis Oliphant created NumPy package by incorporating the features of Numarray into Numeric package. There are many contributors to this open source project. 2. Numpy数值类型NumPy中的基本数据类型 名称 描述 bool 用一个字节存储的布尔类型（True或False） inti 由所在平台决定其大小的整数（一般为int32或int64） int8 一个字节大小，-128 至 127 int16 整数，-32768 至 32767 int32 整数，-2 31 至 2 32 -1 int64 整数，-2 63 至 2 63 - 1 uint8 无符号整数，0 至 255 uint16 无符号整数，0 至 65535 uint32 无符号整数，0 至 2 ** 32 - 1 uint64 无符号整数，0 至 2 ** 64 - 1 float16 半精度浮点数：16位，正负号1位，指数5位，精度10位 float32 单精度浮点数：32位，正负号1位，指数8位，精度23位 float64或float 双精度浮点数：64位，正负号1位，指数11位，精度52位 complex64 复数，分别用两个32位浮点数表示实部和虚部 complex128或complex 复数，分别用两个64位浮点数表示实部和虚部 3. Numpy数组的初始化Numpy的主要数据类型是ndarray，即多维数组。它有以下几个属性：ndarray.ndim：数组的维数ndarray.shape：数组每一维的大小ndarray.size：数组中全部元素的数量ndarray.dtype：数组中元素的类型（numpy.int32, numpy.int16, and numpy.float64等）ndarray.itemsize：每个元素占几个字节 import numpy as np np.arange(24).reshape(3,8) # np.arange初始化数组并reshape #生成数组赋特殊值： np.zeros(24) np.ones(24) # 由于numpy可以按index取值，所以zeros/ones方法可以用来创建bool数组用于取值 >>> np.ones(24, dtype=bool) array([ True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True], dtype=bool) >>> np.empty(24) # 随机数，取决于内存情况 array([ 6.89818397e-310, 6.89818397e-310, 6.89817518e-310, 6.89817518e-310, 6.89817384e-310, 6.89817852e-310, 6.89818486e-310, 6.89818483e-310, 6.89817852e-310, 6.89817384e-310, 6.89818483e-310, 6.89817384e-310, 6.89818486e-310, 6.89818486e-310, 6.89818483e-310, 6.89817518e-310, 6.89818486e-310, 6.89818484e-310, 6.89817518e-310, 6.89818488e-310, 6.89817518e-310, 6.89818486e-310, 6.89818488e-310, 6.89818484e-310]) 'np.arange() （最小值，最大值，步长）（左闭右开） ' 'np.linspace（最小值，最大值，元素数量）' >>> np.linspace(0, 2*np.pi, 20) array([ 0. , 0.33069396, 0.66138793, 0.99208189, 1.32277585, 1.65346982, 1.98416378, 2.31485774, 2.64555171, 2.97624567, 3.30693964, 3.6376336 , 3.96832756, 4.29902153, 4.62971549, 4.96040945, 5.29110342, 5.62179738, 5.95249134, 6.28318531]) 4. Numpy 数组的寻址，索引和遍历多维数组的访问通过给每一维指定一个索引，顺序是先高维再低维： def f(x, y): return 10*x + y >>> np.fromfunction(f, (5,4), dtype=np.int) array([[ 0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]]) >>> b[1:3, :] array([[10, 11, 12, 13], [20, 21, 22, 23]]) …符号表示将所有未指定索引的维度均赋为：，：表示索引该维度范围所有元素 >>> c = np.arange(24).reshape(2,3,4) array([[[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]], [[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]]) >>> c[1,...] array([[12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23]]) 遍历数组的方法可以用循环/迭代器等。如果需要flatten数组然后访问，可以用c.flat做一个迭代器，也可以用c.flatten（）函数将数组先一维展开。 >>> for i in c.flat: print(i) #即可打印所有元素 >>> c.flatten() array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux与Windows双系统启动引导恢复]]></title>
    <url>%2F2017-07-day%2FUbuntu_Rescue_Mode_Repair%2F</url>
    <content type="text"><![CDATA[由grub引导的Linux与Windows共存的双系统环境中，Windows版本更新的时候常会出现grub引导失败，造成系统无法正常启动的问题。这是因为Windows更新的过程中导致MBR损坏导致无法找到/boot/grub部分，无法进一步引导系统。而这种情况下启动界面上会启动grub rescue模式，本文即在此模式下恢复grub引导。 1. 术语简述1.1. BIOS“Basic Input Output System”，中文名称就是”基本输入输出系统”。其实，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、系统设置信息、开机后自检程序和系统自启动程序。 其主要功能是为计算机提供最底层的、最直接的硬件设置和控制。 1.2. MBR“Master Boot Record” 硬盘的物理扇区，也叫主引导记录！因为BIOS 很小无法承载启动的运行程序，所以在bios检测到一个硬盘后，将硬盘的0柱面、0磁头、1扇区的内容经过简单判断后， 至内存中的指定位置，然后跳转至这个位置，开始从这个位置运行，大小为512个byte，其中主要存放引导程序和该硬盘的分区表。 1.3. grub“GRand Unified Bootloade” 多重操作系统启动管理器，就是运行这个GRUB之后可以通过它来引导进入其它的系统，包括window以及linux 小结：PC 首先启动到BIOS ，然后检测硬盘的MBR，将MBR这块扇区的内容(也就是写在上面的GRUB)装入内存运行，再通过运行GRUB得到的结果实现新的跳转启动！ 2. 出现grub resuce情况下修复grub2grub2分为两部分，一部分写入MBR，另一部分存在linux系统的/boot/grub目录下。出现grub rescue&gt;即MBR部分无法正常运作grub程序，找不到/boot/grub部分，于是启动grub救援模式。 grub rescue命令行有以下可用命令：set, ls, insmod, root, prefix（设置启动路径） ls查看所有分区，列出：（hd0），（hd0，msdos8），（hd0，msdos7），（hd0，msdos6），（hd0，msdos5），（hd0，msdos3），（hd0，msdos1）需要找到ubuntu的安装分区，通过 ls (hd0, msdos4)/boot直到不出现error: unknown filesystem 找到之后通过如下命令设置一次性启动参数：grub rescue>set root=(hd0,msdos8) grub rescue>set prefix=(hd0,msdos8)/boot/grub grub rescue>insmod /boot/grub/i386-pc/normal.mod grub resuce> normal 其中/boot/grub/i386-pc/normal.mod路径是在Ubuntu 17.04的系统下的。 如果/boot/grub没有损坏，就能进入Ubuntu系统正常启动界面。If not， 需要手动引导：进入grub命令行：grub> root (hd0,4) ## 指定包含vmlinuz-2.6.18-274.7.1.el5和initrd-2.6.18-274.7.1.el5.img的partition grub> kernel /boot/vmlinuz-2.6.18-274.7.1.el5 ro root=/dev/sda8 ## root= 是指定包含/sbin/init的partition，即挂载/的partition（以Linux的角度） grub> initrd /boot/initrd-2.6.18-274.7.1.el5.img ## 据说这项可以省略 grub> boot 在正确进入了ubuntu之后，需要更新MBR的grub部分来适应新的分区情况：sudo update-grub2 # update /boot/grub/grub.cfg sudo grub-install /dev/sda # install grub into MBR of Mater Disk 3. liveCD 修复方法用启动盘进入try ubuntu界面，手动更新grub sudo update-grub2 sudo grub-install /dev/sda8 参考： csdn-jscese]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks 的搭建]]></title>
    <url>%2F2017-07-day%2FShadowsocks_Configuration%2F</url>
    <content type="text"><![CDATA[对于做科研、写代码的同学来说，翻GFW是必不可少的，对于专业的资料来说，google/sholar搜索的丰富程度可以秒某度的。梯子有很多种，例如改hosts、vpn(SoftEther)、浏览器翻墙的插件(谷歌上网助手)、自由门、GoAgent、cow、Lantern等等。今天我们来介绍一下在国外VPS(Virtual private server)的搭建，不只是可以用来上google，scholar等，可以说相当于拥有了国外的网络环境，没有限制的浏览国外网站。 1. Shadowsocks 简介维基百科搬运： Shadowsocks (以下简称“ss”) 是一种基于Sock5代理方式的网络资料加密传输工具，分为服务器端和客户端。使用之前，需先将服务器端部署到服务器上面，然后通过客户端连接并建立本地代理。ss的运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。在服务器端部署完成后，用户需要按照指定的密码、加密方式和端口使用客户端软件与其连接。在成功连接到服务器后，客户端会在用户的电脑上构建一个本地Socks5代理。浏览网络时，网络流量会被分到本地socks5代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。ss的创建者clowwindy是中国人，15年8月22日受到一些外部压力，宣布停止维护此计划（项目）并移除其个人页面所存储的源代码， 详细News请移步维基百科。 2. ss 搭建详细的搭建步骤有点琐碎，故分列几条。 安装 Shadowsocks server端配置 Windows客户端配置 Android客户端配置 2.1. 安装 ss以Ubuntu 17.04为例。 sudo apt-get update # 升级下 sudo apt-get install python-pip sudo pip install shadowsocks # 安装ss sudo apt–get install python–m2crypto # 用以支持加密方式 2.2. server端配置 ss2.2.1. 即时启动：sudo ssserver -p 8388 -k password -m rc4-md5 -d start 2.2.2. 使用配置文件启动：编辑/etc/shadowsocks/config.json文件（如果没有可以创建此文件） { "server":"my_server_ip", "server_port":8388, "local_address": "127.0.0.1", "local_port":1080, "password":"mypassword", "timeout":300, "method":"rc4-md5" } 字段含义：字段 | 含义———— | ————-server | 服务器 IP (IPv4/IPv6)server_port | 服务器端口local_port | 本地端端口password | 密码timeout | 超时时间(s)method | 加密方法， 可选“bf-cfb”, “aes-256-cfb”, “rc4-md5”,等 加密方式推荐使用rc4-md5，因为 RC4 比 AES 速度快好几倍，如果用在路由器上会带来显著性能提升。旧的 RC4 加密之所以不安全是因为 Shadowsocks 在每个连接上重复使用 key，没有使用 IV。现在已经重新正确实现，可以放心使用。 config.json文件创建完毕后，赋予755权限sudo chmod 755 /etc/shadowsocks/config.json使用配置文件，后台运行：sudo ssserver -c /etc/shadowsocks/config.json -d start 2.2.3. 开机启动上述两种方法都是在机器没有重启的情况下用的，每次重启后都手动去开启ss服务有点麻烦，所以设置开机启动可以省点事。创建 /etc/init.d/shadowsocks 文件 sudo vim /etc/init.d/shadowsocks添加以下内容： #!/bin/sh ### BEGIN INIT INFO # Provides: shadowsocks # Required-Start: $remote_fs $syslog # Required-Stop: $remote_fs $syslog # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: start shadowsocks # Description: start shadowsocks ### END INIT INFO start(){ ssserver -c /etc/shadowsocks/config.json -d start } stop(){ ssserver -c /etc/shadowsocks/config.json -d stop } case "$1" in start) start ;; stop) stop ;; reload) stop start ;; *) echo "Usage: $0 {start|reload|stop}" exit 1 ;; esac 增加这个文件的可执行权限 sudo chmod +x /etc/init.d/shadowsocks在rc.d中新增sudo update-rc.d shadowsocks defaults，添加到开机启动中以后就可以通过sudo service shadowsocks {start|reload|stop}来管理了。 2.2.4. ss 速度优化基于kvm架构vps的优化这方面SS给出了非常详尽的优化指南，主要有：优化内核参数，开启TCP Fast Open这里只给出优化内核参数/优化加密方式的方法。更多、更详细的策略方法请参考shadowsocks optimize 2.2.4.1. 内核参数优化创建 /etc/sysctl.d/local.conf 并写入 # max open files fs.file-max = 1024000 # max read buffer net.core.rmem_max = 67108864 # max write buffer net.core.wmem_max = 67108864 # default read buffer net.core.rmem_default = 65536 # default write buffer net.core.wmem_default = 65536 # max processor input queue net.core.netdev_max_backlog = 4096 # max backlog net.core.somaxconn = 4096 # resist SYN flood attacks net.ipv4.tcp_syncookies = 1 # reuse timewait sockets when safe net.ipv4.tcp_tw_reuse = 1 # turn off fast timewait sockets recycling net.ipv4.tcp_tw_recycle = 0 # short FIN timeout net.ipv4.tcp_fin_timeout = 30 # short keepalive time net.ipv4.tcp_keepalive_time = 1200 # outbound port range net.ipv4.ip_local_port_range = 10000 65000 # max SYN backlog net.ipv4.tcp_max_syn_backlog = 4096 # max timewait sockets held by system simultaneously net.ipv4.tcp_max_tw_buckets = 5000 # TCP receive buffer net.ipv4.tcp_rmem = 4096 87380 67108864 # TCP write buffer net.ipv4.tcp_wmem = 4096 65536 67108864 # turn on path MTU discovery net.ipv4.tcp_mtu_probing = 1 # for high-latency network net.ipv4.tcp_congestion_control = htcp # forward ipv4 net.ipv4.ip_forward = 1 其中最后的hybla是为高延迟网络（如美国，欧洲）准备的算法，需要内核支持，测试内核是否支持，在终端输入：sysctl net.ipv4.tcp_available_congestion_control如果结果中有hybla，则证明你的内核已开启hybla，如果没有hybla，可以用命令modprobe tcp_hybla开启。 对于低延迟的网络（如日本，香港等），可以使用htcp，可以非常显著的提高速度，首先使用modprobe tcp_htcp开启，再将net.ipv4.tcp_congestion_control = hybla改为net.ipv4.tcp_congestion_control = htcp，建议EC2日本用户使用这个算法。 使配置生效：sysctl –systemnote: 经过手机Andoid客户端测试, 速度确实有提升（之前手机端速度感觉已经很快了！），YouTube上1080p的高清视频一点不卡，甚至于还没有缓冲到的时间点直接点击在3秒之内都可以缓冲出来（这个时候的即时速度可以到3M/s）。YouTube 1080p高清测试视频，Planet Earth: Amazing nature scenery 2.2.4.2. TCP优化1.修改文件句柄数限制如果是ubuntu/centos均可修改/etc/sysctl.d/local.conf找到fs.file-max这一行，修改其值为1024000，并保存退出。然后执行sysctl -p使其生效修改vi /etc/security/limits.conf文件，加入 * soft nofile 512000 * hard nofile 1024000 2.修改vi /etc/profile文件，加入ulimit -SHn 1024000然后重启服务器执行ulimit -n，查询返回1024000即可。 sysctl.conf报错解决方法 修复modprobe的： rm -f /sbin/modprobe ln -s /bin/true /sbin/modprobe 修复sysctl的： rm -f /sbin/sysctl ln -s /bin/true /sbin/sysctl 2.2.5. ss 加密优化 装M2Crypto 这个可以提高SS的加密速度，安装办法：Debian/Ubuntuapt-get install python-m2crypto安装之后重启SS，速度将会有一定的提升 装 gevent 安装 gevent可以提高 Shadowsocks 的性能。apt-get install python-dev libevent-dev python-setuptools python-gevent easy_install greenlet gevent]]></content>
      <tags>
        <tag>VPS</tag>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Configuration]]></title>
    <url>%2F2017-07-day%2FHexo%20Configuration%2F</url>
    <content type="text"><![CDATA[Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本文为Hexo相关的东西，大部分与特性配置有关。 1. 特性配置1.1. 文章中添加居中模块文章Markdown中填写如下： &lt;blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你&lt;/blockquote> 1.2. 隐藏网页底部powered By Hexo / 强力驱动打开themes/next/layout/_partials/footer.swig,使用””隐藏之间的代码即可，或者直接删除。 1.3. 友情链接设置编辑站点的 _config.yml 添加： # title, chinese available links_title: Links # links links: MacTalk: http://macshuo.com/ 1.4. 代码高亮prism由wayou开发，代替hexo原生代码高亮。 1.4.1. Install:npm i -S hexo-prism-plugin 1.4.2. Usage:编辑站点配置文件_config.yml，加入 ### prism_plugin prism_plugin: mode: 'preprocess' # realtime or preprocess theme: 'default' #theme: 'coy' #theme: 'dark' #theme: 'funky' #theme: 'okaidia' #theme: 'solarizedlight' #theme: 'tomorrow' #theme: 'twilight' line_number: true # default false auto_import_assets: true # default true 1.4.3. 代码高亮主题测试default:coy:dark:funky:okaidia:solarizedlight:tomorrow:twilight:note:感觉有些主题怪怪的~~~ 1.5. 文章内插入图片在文章中写入: ![](/upload_image/1.jpg) 然后进入themes-主题名-source-upload_image目录下(自己创建)，将图片放到这个目录下，就可以了。 说明：当执行hexo g命令时，会自动把图片复制到 public文件的upload_image目录下。 1.6. 鼠标点击小红心的设置将 love.js 文件添加到 \themes\next\source\js\src 文件目录下。找到 \themes\next\layout_layout.swing 文件， 在文件的后面， 标签之前 添加以下代码： &lt;!-- 页面点击小红心 --> &lt;script type="text/javascript" src="/js/src/love.js">&lt;/script> 1.7. 修改文章内链接文本样式将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。找到文件 themes\next\source\css_custom\custom.styl ，添加如下 css 样式： .post-body p a { color: #0593d3; border-bottom: none; &amp;:hover { color: #0477ab; text-decoration: underline; } } 1.8. 设置字体 note: 此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后 为了解决 Google Fonts API 不稳定的问题，NexT 在 5.0.1 中引入此特性。 通过此特性，你可以指定所使用的字体库外链地址；与此同时，NexT 开放了 5 个特定范围的字体设定，他们是： 全局字体：定义的字体将在全站范围使用 标题字体：文章内标题的字体（h1, h2, h3, h4, h5, h6） 文章字体：文章所使用的字体 Logo字体：Logo 所使用的字体 代码字体： 代码块所使用的字体 注意，各项所指定的字体将作为首选字体，当他们不可用时会自动 Fallback 到 NexT 设定的基础字体组：非代码类字体：Fallback 到 “PingFang SC”, “Microsoft YaHei”, sans-serif代码类字体： Fallback 到 consolas, Menlo, “PingFang SC”, “Microsoft YaHei”, monospace另外，每一项都有一个额外的 external 属性，此属性用来控制是否使用外链字体库。 开放此属性方便你设定那些已经安装在系统中的字体，减少不必要的请求（请求大小）。 font: enable: true # 外链字体库地址，例如 //fonts.googleapis.com (默认值) host: //fonts.googleapis.com # 全局字体，应用在 body 元素上 global: external: true family: Lato # 标题字体 (h1, h2, h3, h4, h5, h6) headings: external: true family: Playball size: 30 # 文章字体 posts: external: true family: # Logo 字体 logo: external: true family: Playball size: 40 # 代码字体，应用于 code 以及代码块 codes: external: true family: Droid Sans Mono size: 25 1.9. 设置菜单菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景。参考官方设置菜单配置如添加一个新的页面“链接”： hexo new page Links 即在hexo/source/目录下新建了Links目录，目录中包含index.md文件，文件内容： --- title: Links date: 2017-07-20 10:34:38 --- 然后再NexT主题配置文件中的menu项和menu_ico项中加入 Links menu: home: / categories: /categories/ archives: /archives/ tags: /tags/ about: /about/ links: /Links/ # note: links尝试用过Links: /Links发现会有问题——即使hexo g产生的/hexo/public目录中确实有/links，但是在推送到VPS的时候莫名其妙变成/Links，造成无法访问。 menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: heart archives: archive links: heart 最后要修改/themes/next/languages/中对应的语言文件zh-Hans.yml的中links项 menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 links: 链接 1.10. 添加并美化本地搜索NexT 主题内置了本地站内搜索，很方便添加。 首先安装hexo-generator-search插件，用于生成博客索引数据在站点的根目录下执行以下命令进行安装：npm install hexo-generator-search --save 编辑 站点配置文件_config.yml，新增以下内容到任意位置： search: path: search.xml field: post 编辑NexT主题配置文件_config.yml，解注释local search:# Local search local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button path: search.xml fielf: post format: html limit: 10000 trigger: auto # 注意把trigger: auto打开，可以在输入的同时即时显示搜索结果 # show top n results per article, show all results by setting to -1 #top_n_per_article: 1 1.11. 侧边栏头像修饰把侧边栏头像变成圆形，并且鼠标停留在上面发生旋转效果，参考这里，具体修改文件的位置是hexo\themes\next\source\css\_common\components\sidebar\sidebar-author.styl中的内容如下: .site-author-image { display: block; margin: 0 auto; max-width: 96px; height: auto; border: 2px solid #333; padding: 2px; /* start*/ border-radius: 50% webkit-transition: 1.4s all; moz-transition: 1.4s all; ms-transition: 1.4s all; transition: 1.4s all; /* end */ } /* start */ .site-author-image:hover { background-color: #55DAE1; webkit-transform: rotate(360deg) scale(1.1); moz-transform: rotate(360deg) scale(1.1); ms-transform: rotate(360deg) scale(1.1); transform: rotate(360deg) scale(1.1); } /* end */ 1.12. Cloudinary 在线图片服务除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。在Cloudinary申请账号，上传图片(注意把upload选项中的unsigned signature选上) 1.13. 设置文章置顶 note: 参考解决文章置顶 安装 hexo-generator-index npm i --save hexo-generator-index 将如下的代码加入node_modules/hexo-generator-index/lib/generator.js posts.data = posts.data.sort(function(a, b) { if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if(!a.top &amp;&amp; b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); 最终的 node_modules/hexo-generator-index/lib/generator.js 代码: 'use strict'; var pagination = require('hexo-pagination'); module.exports = function(locals) { var config = this.config; var posts = locals.posts.sort(config.index_generator.order_by); var paginationDir = config.pagination_dir || 'page'; posts.data = posts.data.sort(function(a, b) { if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 } else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; } else if(!a.top &amp;&amp; b.top) { return 1; } else return b.date - a.date; // 都没定义按照文章日期降序排 }); return pagination('', posts, { perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: { __index: true } }); }; 在文章 Front-matter 中添加 top 值，数值越大文章越靠前，如： title: Hexo date: 2017-07-21 tags: vps categories: vps top: 3 1.14. next主题宽度调整编辑 themes/next/source/css/_variables/custom.styl 文件，新增变量： // 修改成你期望的宽度 $content-desktop = 700px // 当视窗超过 1600px 后的宽度 $content-desktop-large = 900px 以上方法不适用与next.Picses schemePisces Scheme 编辑themes/next/source/css/_schemes/Picses/_layout.styl文件，更改以下 css 选项定义值： .header{ width: 1150px; } .container .main-inner { width: 1150px; } .content-wrap { width: calc(100% - 260px); } 1.15. 设置disqus note: “多说”评论功能应用广泛，但是据其公司的声明，多说网已经关闭。 hexo已经内置了对disqus的支持，配置也很简单 首先注册disques账号https://disqus.com 获取shortname next主题内置了对disqus的支持，在next主题的_config_xml中搜索disqus，并做如下配置：# disqus disqus: enable: True shortname: jiaxm-me count: true 1.16. 给github添加READMEhexo会把md文件都解析成html，但是github的readme只支持MD格式，最简单的方法是让hexo不对README.md做转换。站点配置文件_config_xml中的skip_render:改为skip_render: README.mdnote: README.md放在 hexo/source/目录中即可 1.17. MarkDown里 table 的语法MD的写法 | I | am | table | |:-----|:---:|----------:| |文本内容| **`是`** |table| |文本内容| **`是`** |table| |文本内容| **`是`** |table| 表格与上面的文本内容之间空一行。否则解析不出来 最上面一行是表格第一列的值。第二行的冒号位置决定表格内文本的对齐方式。有水平居中、水平靠左对齐、水平靠右对齐三种 每列的宽度是根据对应列里最长的文本来决定的 输出结果： 我 是 展示表格 文本内容 是 table 文本内容 是 table 文本内容 是 table 1.18. 去除b2t sidebar找到Hexo/themes/next/layout/_macro/sidebar.swig文件，去掉其中关于b2t的部分： {% if theme.sidebar.b2t %} &lt;div class="back-to-top"> &lt;i class="fa fa-arrow-up">&lt;/i> {% if theme.sidebar.scrollpercent %} &lt;span id="scrollpercent">&lt;span>0&lt;/span>%&lt;/span> {% endif %} &lt;/div> {% endif %} &lt;/div> 2. 主题配置参考 markdown table]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令行快捷键]]></title>
    <url>%2F2017-07-day%2FLinux_Terminal_Shortcuts%2F</url>
    <content type="text"><![CDATA[note: 这些快捷键在xshell5环境下适用在shell命令终端中，Ctrl+n相当于方向向下的方向键，Ctrl+p相当于方向向上的方向键。在命令终端中通过它们或者方向键可以实现对历史命令的快速查找。这也是快速输入命令的技巧。在命令终端中可以通过Ctrl+r 实现快速检索使用过的历史命令。Ctrl+r中r是retrieve中r。 Ctrl+a：光标回到命令行首。 （a：ahead）Ctrl+e：光标回到命令行尾。 （e：end）Ctrl+b：光标向行首移动一个字符。 （b：backwards）Ctrl+ f：光标向行尾移动一个字符。 （f：forwards）Ctrl+w: 删除光标处到行首的字符。Ctrl+k：删除光标处到行尾的字符。Ctrl+u：删除整个命令行文本字符。Ctrl+h：向行首删除一个字符。Ctrl+d：向行尾删除一个字符。Ctrl+y:：粘贴Ctrl+u，Ctrl+k，Ctrl+w删除的文本。Ctrl+p: 上一个使用的历史命令。 （p：previous）Ctrl+n： 下一个使用的历史命令。（n：next ）Ctrl+r：快速检索历史命令。（r：retrieve）。Ctrl+t： 交换光标所在字符和其前的字符。Ctrl+i：相当于Tab键。Ctrl+o：相当于Ctrl+m.Ctrl+m：相当Enter键。其他控制键：Ctrl+s:使终端发呆，静止，可以使快速输出的终端屏幕停下来。Ctrl+q：退出Ctrl+s引起的发呆。Ctrl+z：使正在运行在终端的任务，运行于后台。 （可用fg恢复）Ctrl+c：中断终端中正在执行的任务。Ctrl+d: 在空命令行的情况下可以退出终端。Ctrl+[ ：相当于Esc键。Esc键：连续按3次显示所有的支持的终端命令。Tab键：命令、文件名等自动补全功能。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS Configuration]]></title>
    <url>%2F2017-07-day%2FVPS%20Configuraton%2F</url>
    <content type="text"><![CDATA[VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。简单的说，VPS就是一台拥有公网IP的服务器总结一下VPS搭建的过程，从域名的购买到VPS的设置 1. VPS的配置1.1. VPS的购买 TBD1.2. VPS在ubuntu 17.04下的软件配置$ apt-get update &amp;&amp; apt-get upgrade $ apt-get install git git-core $ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - $ apt-get install -y nodejs $ npm install hexo-cli hexo-server -g $ apt-get install nginx 2. 第三方服务2.1. 腾讯企业邮箱 购买域名 注册腾讯企业邮箱 在域名购买处填写MX记录 （注册腾讯企业邮箱过程中会有提示） SPF 防止发出的邮件被识别为垃圾邮件。SPF是通过域名的TXT记录来进行设置的。为了提升域名邮箱发送外域（@qq.com以外的邮箱）邮件的成功率，可以给自己的域名设置一条TXT记录来避免这种情况。 TXT记录值为：v=spf1 include:spf.mail.qq.com ~all 2.2. Shadowsocks的搭建见站内文章-Shadowsocks搭建]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3 学习爬虫遇到的一点编码问题]]></title>
    <url>%2F2017-07-day%2Fpython_code%2F</url>
    <content type="text"><![CDATA[1. python3 学习爬虫遇到的一点编码问题1.1. 上解决代码：#coding='utf-8' import chardet import requests, re, sys headers = { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_\ 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 S\ afari/537.36'} r = requests.get("https://www.qiushibaike.com", headers=headers) pattern=re.compile('&lt;div class="author.*?&lt;h2>(.*?)&lt;/h2>.*?Icon">(.*?)&lt;/div>.*?&lt;div class="content">.*?&lt;span>(.*?)&lt;/span>.*?&lt;span.*?stats-vote.*?number">(.*?)&lt;/i>.*?stats-comments.*?number">(.*?)&lt;/i>.*?up.*?number hidden">(.*?)&lt;/span>.*?down.*?number hidden">(.*?)&lt;/span>',re.S) items = re.findall(pattern, r.text) fout = open("qiubai.txt", 'w') for i, item in enumerate(items): fout.write("=========================================\n") name = item[0] age = int(item[1]) up = int(item[3]) comment = int(item[4]) down = -int(item[-1]) tot = int(item[5]) s = item[2].split("&lt;br/>") print(item) for l in s: gl = l.encode('gbk','ignore') fout.write("%s\n"%(gl.decode('gbk'))) fout.write("ID: %s\nAge: %d\n顶: %d\n踩: %d\n评论:%d\n"%(name, age, up, comment, down)) fout.write("\n") 1.2. 总结一下就是：在windows上即使你想用utf-8的编码写入文件也不行，因为在windows上就是以gbk保存的。不知道是不是和系统语言有关系。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编码</tag>
      </tags>
  </entry>
</search>